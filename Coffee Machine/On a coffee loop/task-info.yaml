type: edu
custom_name: stage5
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachine.java
  visible: true
  text: "package machine;\nimport java.util.Scanner;\n\npublic class CoffeeMachine\
    \ {\n    public static void main(String[] args) {\n        Scanner input = new\
    \ Scanner(System.in);\n    /*      System.out.println(\"Starting to make a coffee\\\
    n\" +\n                \"Grinding coffee beans\\n\" +\n                \"Boiling\
    \ water\\n\" +\n                \"Mixing boiled water with crushed coffee beans\\\
    n\" +\n                \"Pouring coffee into the cup\\n\" +\n                \"\
    Pouring some milk into the cup\\n\" +\n                \"Coffee is ready!\");\n\
    \n        System.out.println(\"How many cups of coffee do you need? \");\n   \
    \     int cups = input.nextInt();\n        int water = cups * 200;\n        int\
    \ milk = cups * 50;\n        int beans = cups * 15;\n        System.out.println(\"\
    for \"+ cups +\" cups of coffee you will need: \\n\" +\n                \"\" +\
    \ water + \"mL of water\\n\" +\n                \"\" + milk + \"mL of milk\\n\"\
    \ +\n                \"\" + beans + \"g of coffee beans\");\n\n        int water\
    \ = input.nextInt() / 200;\n        int milk = input.nextInt() / 50;\n       \
    \ int beans = input.nextInt() / 15;\n        int cups = input.nextInt();\n   \
    \     int n;\n        int N;\n\n        n = Math.min(water, Math.min(milk, beans));\n\
    \n        System.out.println(n);\n        if (n == cups) {\n            System.out.println(\"\
    Yes, I can make that amount of coffee\");\n        } else if (n > cups) {\n  \
    \          n -= cups;\n            System.out.println(\"Yes, I can make that amount\
    \ of coffee (and even \" + n + \" more than that)\");\n        } else if (n <\
    \ cups) {\n            System.out.println(\"No, I can make only \" + n + \" cup(s)\
    \ of coffee\");\n        } \n        int water = 400;\n        int milk = 540;\n\
    \        int beans = 120;\n        int cups = 9;\n        int money = 550;\n \
    \       System.out.println(\"The coffee machine has: \\n\" +\n               \
    \ + water  + \" of water\\n\"\n                + milk + \" of milk\\n\"\n    \
    \            + beans + \" of beans\\n\"\n                + cups + \" of disposable\
    \ cups\\n\"\n                + money + \" of money\\n\");\n        String choice\
    \ = input.nextLine();\n        choice = choice.toLowerCase();\n\n        switch\
    \ (choice) {\n            case \"buy\":\n                int type = input.nextInt();\n\
    \                switch (type) {\n                    case 1: // Espresso\n  \
    \                      water -= 250;\n                        beans -= 16;\n \
    \                       money += 4;\n                        cups -= 1;\n    \
    \                    System.out.println(\"The coffee machine has: \\n\" +\n  \
    \                              + water  + \" of water\\n\"\n                 \
    \               + milk + \" of milk\\n\"\n                                + beans\
    \ + \" of beans\\n\"\n                                + cups + \" of disposable\
    \ cups\\n\"\n                                + money + \" of money\\n\");\n  \
    \                      break;\n                    case 2: // Latte\n        \
    \                water -= 350;\n                        milk -= 75;\n        \
    \                beans -= 20;\n                        money += 7;\n         \
    \               cups -= 1;\n                        System.out.println(\"The coffee\
    \ machine has: \\n\" +\n                                + water  + \" of water\\\
    n\"\n                                + milk + \" of milk\\n\"\n              \
    \                  + beans + \" of beans\\n\"\n                              \
    \  + cups + \" of disposable cups\\n\"\n                                + money\
    \ + \" of money\\n\");\n                        break;\n                    case\
    \ 3: // Cappuccino\n                        water -= 200;\n                  \
    \      milk -= 100;\n                        beans -= 12;\n                  \
    \      money += 6;\n                        cups -= 1;\n                     \
    \   System.out.println(\"The coffee machine has: \\n\" +\n                   \
    \             + water  + \" of water\\n\"\n                                + milk\
    \ + \" of milk\\n\"\n                                + beans + \" of beans\\n\"\
    \n                                + cups + \" of disposable cups\\n\"\n      \
    \                          + money + \" of money\\n\");\n                    \
    \    break;\n                }\n                break;\n            case \"fill\"\
    :\n                water += input.nextInt();\n                milk += input.nextInt();\n\
    \                beans += input.nextInt();\n                cups += input.nextInt();\n\
    \                System.out.println(\"The coffee machine has: \\n\" +\n      \
    \                  + water  + \" of water\\n\"\n                        + milk\
    \ + \" of milk\\n\"\n                        + beans + \" of beans\\n\"\n    \
    \                    + cups + \" of disposable cups\\n\"\n                   \
    \     + money + \" of money\\n\");\n                break;\n            case \"\
    take\":\n                System.out.println(\"I gave you \" + money);\n      \
    \          money -= money;\n                System.out.println(\"The coffee machine\
    \ has: \\n\" +\n                        + water  + \" of water\\n\"\n        \
    \                + milk + \" of milk\\n\"\n                        + beans + \"\
    \ of beans\\n\"\n                        + cups + \" of disposable cups\\n\"\n\
    \                        + money + \" of money\\n\");\n                break;\n\
    \        } */\n        \n    }\n}\n"
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/179/implement
status: Solved
record: 5
